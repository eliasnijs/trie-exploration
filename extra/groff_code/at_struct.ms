\m[darkred]/*\m[] enumerations\m[darkred],\m[] structs\m[darkred],\m[] unions \m[darkred]*/\m[]
struct atrie_node \m[darkred]{\m[]
    char \m[darkred]*\m[]ls\m[darkred];\m[]    \m[darkred]/*\m[] \f[CB]\m[blue]if\m[]\fP the node \f[CB]\m[blue]is\m[]\fP a leafe\m[darkred],\m[] complete string\m[darkred],\m[]
               otherwise a zero\m[darkred]-\m[]pointer \m[darkred]*/\m[]
    char \m[darkred]*\m[]s\m[darkred];\m[]    \m[darkred]/*\m[] substring represented by the node \m[darkred]*/\m[]
    int16 m\m[darkred];\m[]    \m[darkred]/*\m[] the length of s \m[darkred]*/\m[]
    struct atrie_node \m[darkred]*\m[]next\m[darkred][\m[]ARRAYTRIE_ALPHASIZE\m[darkred]];\m[]
\m[darkred]};\m[]

struct atrie \m[darkred]{\m[]
    struct atrie_node \m[darkred]*\m[]root\m[darkred];\m[]
    size_t wc\m[darkred];\m[]
\m[darkred]};\m[]

\m[darkred]/*\m[] function definitions \m[darkred]*/\m[]
struct atrie \m[darkred]*\m[] \f[CB]\m[black]arraytrie_init\m[]\fP\m[darkred]();\m[]
void \f[CB]\m[black]arraytrie_free\m[]\fP\m[darkred](\m[]struct atrie \m[darkred]*\m[]at\m[darkred]);\m[]
void \f[CB]\m[black]arraytrie_print\m[]\fP\m[darkred](\m[]FILE \m[darkred]*\m[]f\m[darkred],\m[] struct atrie \m[darkred]*\m[]at\m[darkred]);\m[]
bool \f[CB]\m[black]arraytrie_add\m[]\fP\m[darkred](\m[]struct atrie \m[darkred]*\m[]at\m[darkred],\m[] const char \m[darkred]*\m[]s\m[darkred]);\m[]
bool \f[CB]\m[black]arraytrie_search\m[]\fP\m[darkred](\m[]struct atrie \m[darkred]*\m[]at\m[darkred],\m[] const char \m[darkred]*\m[]s\m[darkred]);\m[]
bool \f[CB]\m[black]arraytrie_remove\m[]\fP\m[darkred](\m[]struct atrie \m[darkred]*\m[]at\m[darkred],\m[] const char\m[darkred]*\m[] s\m[darkred]);\m[]
size_t \f[CB]\m[black]arraytrie_size\m[]\fP\m[darkred](\m[]struct atrie \m[darkred]*\m[]trie\m[darkred]);\m[]

internal void \f[CB]\m[black]_arraytrie_free\m[]\fP\m[darkred](\m[]struct atrie_node \m[darkred]*\m[]n\m[darkred]);\m[]
internal void \f[CB]\m[black]_arraytrie_remove\m[]\fP\m[darkred](\m[]struct atrie_node \m[darkred]**\m[]n\m[darkred],\m[] const char \m[darkred]*\m[]s\m[darkred],\m[] int32 l\m[darkred],\m[]
                 int32 i_s\m[darkred],\m[] bool \m[darkred]*\m[]is_success\m[darkred]);\m[]
internal void \f[CB]\m[black]_arraytrie_print\m[]\fP\m[darkred](\m[]FILE \m[darkred]*\m[]f\m[darkred],\m[] struct atrie_node \m[darkred]*\m[]n\m[darkred],\m[] int32 j\m[darkred],\m[] int32 w\m[darkred],\m[]
                   bool32 enter\m[darkred]);\m[]
internal struct atrie_node \m[darkred]*\m[] \f[CB]\m[black]node_new\m[]\fP\m[darkred](\m[]const char \m[darkred]*\m[]s\m[darkred],\m[] int32 m\m[darkred]);\m[]
internal void \f[CB]\m[black]node_die\m[]\fP\m[darkred](\m[]struct atrie_node \m[darkred]*\m[]n\m[darkred]);\m[]
